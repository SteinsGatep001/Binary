// dllmain.cpp : 定义 DLL 应用程序的入口点。
#include "Dll_Hook.h"

/*
*
* definitions
*
*/
// string definitions
#define NULLSTR ""
#define NULLCHAR '\0'
#define SPACESTR " "

// proc-hooking x64 assembly definitions
#define	PROCHOOK_MOVCODE 0x48		// mov rax
#define PROCHOOK_64BITADDR 0xB8
#define PROCHOOK_JMPCODE 0xFF
#define PROCHOOK_REGCODE 0xE0

// misc
#define TBUFFERSIZE	200000
#define KBUFFERSIZE	2000
#define MAXTEXTOUT 8192
#define PROCESSIDSTRING "*!~!*%ld*!~!*"
#define PROCESSIDMAX 20

/*
*
* types
*
*/
// prochooking types
#pragma pack(1)
typedef struct _ProcHook
{
	BYTE byMovCode = PROCHOOK_MOVCODE;
	BYTE byAddrType = PROCHOOK_64BITADDR;
	unsigned __int64 ui64Address;
	BYTE byJmpCode = PROCHOOK_JMPCODE;
	BYTE byRegisterCode = PROCHOOK_REGCODE;
}PROCHOOK, *PPROCHOOK;
#pragma pack()

typedef struct _HookRec
{
	unsigned __int64	ui64AddressFunc;
	unsigned __int64	ui64AddressShadowFunc;
	PROCHOOK			phOld;
	PROCHOOK			phNew;
}HOOKREC, *PHOOKREC;


/*
*
* shared memory variables
*
*/
#pragma data_seg(".sd_64bithookdll")

// prochook text buffer variables
DWORD __dwLastTextProcessID = 0;
size_t __stTextBufferPtr = 0;

// keystroke logging buffer variables
DWORD __dwLastKeyProcessID = 0;
size_t __stKeyBufferPtr = 0;
char __szKeyBuffer[KBUFFERSIZE] = NULLSTR;

// process handle to block terminateprocess for
DWORD __dwRootAppID = 0;

// hook handles
HHOOK __hHook;

#pragma data_seg()

/*
*
* global variables
*
*/
// dll handles, and process id's
HINSTANCE _hDll;
DWORD _dwCurrentProcessID = 0;
char _szCurrentProcessID[PROCESSIDMAX] = NULLSTR;

// monitoring app and hook statuses
BOOL _bIsRootApp = FALSE;
BOOL _bIsHooked = FALSE;

// Hook test
HOOKREC _hrHookTestA0;

/*
*
* function prototypes
*
*/
// private functions
void WINAPI CreateHook(unsigned __int64, unsigned __int64, PHOOKREC);
void WINAPI DestroyHook(PHOOKREC);
void WINAPI HookFunction(PHOOKREC);
void WINAPI UnhookFunction(PHOOKREC);
void WINAPI HookTestA0(void);
void WINAPI ShadowHookTestA0(void);


BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
		case DLL_PROCESS_ATTACH:
		{
			printf_s("dll attached!\n");
			// initialize instance wide globals
			_hDll = hModule;
			_dwCurrentProcessID = GetCurrentProcessId();
			sprintf_s(_szCurrentProcessID, PROCESSIDMAX, PROCESSIDSTRING, _dwCurrentProcessID);

			break;
		}
		case DLL_PROCESS_DETACH:
		{
			printf_s("dll detached!\n");

			break;
		}
		case DLL_THREAD_ATTACH:
		{
			break;
		}
		case DLL_THREAD_DETACH:
		{
			break;
		}
	}

	return TRUE;
}


/*
*
* public exported functions
*
*/
void WINAPI StartHook(void)
{
	char c = getchar();
	CreateHook((unsigned __int64)HookTestA0, (unsigned __int64)ShadowHookTestA0, (PHOOKREC)&_hrHookTestA0);
	printf_s("are you kidding me?\n");
	if (c == 'y')
		HookTestA0();
	return;
}

void WINAPI StopHook(void)
{
	DestroyHook((PHOOKREC)&_hrHookTestA0);
	return;
}


/*
*
* prochooking shadow functions, function calls to the associated API functions get redirected here
*
*/

void WINAPI HookTestA0(void)
{
	int mc = 0;
	printf_s("What are you doning?\n");
	for (int i = 0; i < 10; i++)
	{
		printf_s("This is func0\n");
		printf_s("in print : %d", mc+i);
	}
	return;
}

void WINAPI ShadowHookTestA0()
{
	BOOL bRet = FALSE;
	printf_s("Im fine\n");
	int mc = 1;
	for (int i = 0; i < 10; i++)
	{
		printf_s("This is func1\n");
		printf_s("in print : %d\n", mc + i);
	}
	// pass on call to real function
	UnhookFunction((PHOOKREC)&_hrHookTestA0);
	HookTestA0();
	HookFunction((PHOOKREC)&_hrHookTestA0);
	return;
}

void WINAPI CreateHook(unsigned __int64 ui64AddressFunc, unsigned __int64 ui64AddressShadowFunc, PHOOKREC phr)
{
	DWORD dwOldAttr;

	// setup hookrec structure
	phr->ui64AddressFunc = ui64AddressFunc;
	phr->ui64AddressShadowFunc = ui64AddressShadowFunc;
	phr->phNew.ui64Address = ui64AddressShadowFunc;
	memcpy((void *)&phr->phOld, (LPVOID)phr->ui64AddressFunc, sizeof(PROCHOOK));

	// unprotect memory
	if (VirtualProtect((void *)phr->ui64AddressFunc, sizeof(PROCHOOK), PAGE_EXECUTE_READWRITE, &dwOldAttr) == FALSE)
	{
		printf_s("vpfail\n");
	}

	// hook function
	HookFunction(phr);

	return;
}

void WINAPI DestroyHook(PHOOKREC phr)
{

	// unhook function
	UnhookFunction(phr);

	// reset hookrec
	phr->ui64AddressFunc = 0;
	phr->ui64AddressShadowFunc = 0;
	phr->phNew.ui64Address = 0;
	memset((void *)&phr->phOld, 0, sizeof(PROCHOOK));

	return;
}

void WINAPI HookFunction(PHOOKREC phr)
{

	// copy the jump bytes over top of the function
	memcpy((void *)phr->ui64AddressFunc, (const void *)&phr->phNew, sizeof(PROCHOOK));
	return;
}

void WINAPI UnhookFunction(PHOOKREC phr)
{

	// copy the original bytes over top of the jump bytes
	memcpy((void *)phr->ui64AddressFunc, (const void *)&phr->phOld, sizeof(PROCHOOK));
	return;
}
